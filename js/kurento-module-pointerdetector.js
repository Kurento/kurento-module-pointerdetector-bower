!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var o;"undefined"!=typeof window?o=window:"undefined"!=typeof global?o=global:"undefined"!=typeof self&&(o=self),o.kurentoModulePointerdetector=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var checkType      = kurentoClient.checkType;
var ChecktypeError = checkType.ChecktypeError;

var Transaction = kurentoClient.TransactionsManager.Transaction;

var Filter = kurentoClient.register.abstracts.Filter;

/**
 * Builder for the :rom:cls:`PointerDetector`.
 *
 * @classdesc
 *  This type of {@link module:core/abstracts.Filter Filter} detects UI pointers in a video feed.
 *
 * @extends module:core/abstracts.Filter
 *
 * @constructor module:pointerdetector.PointerDetectorFilter
 *
 * @fires {@link module:pointerdetector#event:WindowIn WindowIn}
 * @fires {@link module:pointerdetector#event:WindowOut WindowOut}
 */
function PointerDetectorFilter(){
  PointerDetectorFilter.super_.call(this);
};
inherits(PointerDetectorFilter, Filter);


/**
 *  Adds a new detection window for the filter to detect pointers entering or exiting the window
 *
 * @alias module:pointerdetector.PointerDetectorFilter.addWindow
 *
 * @param {module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam} window
 *  The window to be added
 *
 * @param {module:pointerdetector.PointerDetectorFilter~addWindowCallback} [callback]
 *
 * @return {external:Promise}
 */
PointerDetectorFilter.prototype.addWindow = function(window, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('PointerDetectorWindowMediaParam', 'window', window, {required: true});

  var params = {
    window: window,
  };

  return this._invoke(transaction, 'addWindow', params, callback);
};
/**
 * @callback module:pointerdetector.PointerDetectorFilter~addWindowCallback
 * @param {external:Error} error
 */

/**
 * Removes all pointer detector windows
 *
 * @alias module:pointerdetector.PointerDetectorFilter.clearWindows
 *
 * @param {module:pointerdetector.PointerDetectorFilter~clearWindowsCallback} [callback]
 *
 * @return {external:Promise}
 */
PointerDetectorFilter.prototype.clearWindows = function(callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  if(!arguments.length) callback = undefined;

  return this._invoke(transaction, 'clearWindows', callback);
};
/**
 * @callback module:pointerdetector.PointerDetectorFilter~clearWindowsCallback
 * @param {external:Error} error
 */

/**
 * Removes a window from the list to be monitored
 *
 * @alias module:pointerdetector.PointerDetectorFilter.removeWindow
 *
 * @param {external:String} windowId
 *  the id of the window to be removed
 *
 * @param {module:pointerdetector.PointerDetectorFilter~removeWindowCallback} [callback]
 *
 * @return {external:Promise}
 */
PointerDetectorFilter.prototype.removeWindow = function(windowId, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('String', 'windowId', windowId, {required: true});

  var params = {
    windowId: windowId,
  };

  return this._invoke(transaction, 'removeWindow', params, callback);
};
/**
 * @callback module:pointerdetector.PointerDetectorFilter~removeWindowCallback
 * @param {external:Error} error
 */

/**
 * This method allows to calibrate the tracking color.
 * 
 * The new tracking color will be the color of the object in the colorCalibrationRegion.
 *
 * @alias module:pointerdetector.PointerDetectorFilter.trackColorFromCalibrationRegion
 *
 * @param {module:pointerdetector.PointerDetectorFilter~trackColorFromCalibrationRegionCallback} [callback]
 *
 * @return {external:Promise}
 */
PointerDetectorFilter.prototype.trackColorFromCalibrationRegion = function(callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  if(!arguments.length) callback = undefined;

  return this._invoke(transaction, 'trackColorFromCalibrationRegion', callback);
};
/**
 * @callback module:pointerdetector.PointerDetectorFilter~trackColorFromCalibrationRegionCallback
 * @param {external:Error} error
 */

/**
 * @alias module:pointerdetector.PointerDetectorFilter.constructorParams
 *
 * @property {module:pointerdetector/complexTypes.WindowParam} calibrationRegion
 *  region to calibrate the filter
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  the {@link module:core.MediaPipeline MediaPipeline} to which the filter belongs
 *
 * @property {module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam} [windows]
 *  list of detection windows for the filter.
 */
PointerDetectorFilter.constructorParams = {
  calibrationRegion: {
    type: 'WindowParam',
    required: true
  },

  mediaPipeline: {
    type: 'MediaPipeline',
    required: true
  },

  windows: {
    type: 'PointerDetectorWindowMediaParam',
    isList: true,
  },
};

/**
 * @alias module:pointerdetector.PointerDetectorFilter.events
 *
 * @extends module:core/abstracts.Filter.events
 */
PointerDetectorFilter.events = Filter.events.concat(['WindowIn', 'WindowOut']);

module.exports = PointerDetectorFilter;

PointerDetectorFilter.check = function(key, value)
{
  if(!(value instanceof PointerDetectorFilter))
    throw ChecktypeError(key, PointerDetectorFilter, value);
};

},{"inherits":6,"kurento-client":"kurento-client"}],2:[function(require,module,exports){
/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var checkType = require('kurento-client').checkType;

/**
 * Checker for {@link pointerdetector/complexTypes.PointerDetectorWindowMediaParam}
 *
 * @memberof module:pointerdetector/complexTypes
 *
 * @param {external:String} key
 * @param {module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam} value
 */
function checkPointerDetectorWindowMediaParam(key, value)
{
  checkType('String', key+'.id', value.id, true);
  checkType('int', key+'.height', value.height, true);
  checkType('int', key+'.width', value.width, true);
  checkType('int', key+'.upperRightX', value.upperRightX, true);
  checkType('int', key+'.upperRightY', value.upperRightY, true);
  checkType('String', key+'.activeImage', value.activeImage);
  checkType('float', key+'.imageTransparency', value.imageTransparency);
  checkType('String', key+'.image', value.image);
};


/**
 * Data structure for UI Pointer detection in video streams.
 * 
 * All the coordinates are in pixels. X is horizontal, Y is vertical, running from the top of the window. Thus, 0,0 corresponds to the topleft corner.
 *
 * @memberof module:pointerdetector/complexTypes
 *
 * @typedef pointerdetector/complexTypes.PointerDetectorWindowMediaParam
 *
 * @type {Object}
 * @property {external:String} id
 *  id of the window for pointer detection
 * @property {external:Integer} height
 *  height in pixels
 * @property {external:Integer} width
 *  width in pixels
 * @property {external:Integer} upperRightX
 *  X coordinate in pixels of the upper left corner
 * @property {external:Integer} upperRightY
 *  Y coordinate in pixels of the upper left corner
 * @property {external:String} activeImage
 *  uri of the image to be used when the pointer is inside the window
 * @property {external:Number} imageTransparency
 *  transparency ratio of the image
 * @property {external:String} image
 *  uri of the image to be used for the window.
 *  
 *  If {@link module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam#activeImage} has been set, it will only be shown when the pointer is outside of the window.
 */


module.exports = checkPointerDetectorWindowMediaParam;

},{"kurento-client":"kurento-client"}],3:[function(require,module,exports){
/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var checkType = require('kurento-client').checkType;

/**
 * Checker for {@link pointerdetector/complexTypes.WindowParam}
 *
 * @memberof module:pointerdetector/complexTypes
 *
 * @param {external:String} key
 * @param {module:pointerdetector/complexTypes.WindowParam} value
 */
function checkWindowParam(key, value)
{
  checkType('int', key+'.topRightCornerX', value.topRightCornerX, true);
  checkType('int', key+'.topRightCornerY', value.topRightCornerY, true);
  checkType('int', key+'.width', value.width, true);
  checkType('int', key+'.height', value.height, true);
};


/**
 * Parameter representing a window in a video stream.
 * It is used in command and constructor for media elements.
 * 
 * All units are in pixels, X runs from left to right, Y from top to bottom.
 *
 * @memberof module:pointerdetector/complexTypes
 *
 * @typedef pointerdetector/complexTypes.WindowParam
 *
 * @type {Object}
 * @property {external:Integer} topRightCornerX
 *  X coordinate of the left upper point of the window
 * @property {external:Integer} topRightCornerY
 *  Y coordinate of the left upper point of the window
 * @property {external:Integer} width
 *  width in pixels of the window
 * @property {external:Integer} height
 *  height in pixels of the window
 */


module.exports = checkWindowParam;

},{"kurento-client":"kurento-client"}],4:[function(require,module,exports){
/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

/**
 * Media API for the Kurento Web SDK
 *
 * @module pointerdetector/complexTypes
 *
 * @copyright 2013-2014 Kurento (http://kurento.org/)
 * @license LGPL
 */

var PointerDetectorWindowMediaParam = require('./PointerDetectorWindowMediaParam');
var WindowParam = require('./WindowParam');


exports.PointerDetectorWindowMediaParam = PointerDetectorWindowMediaParam;
exports.WindowParam = WindowParam;

},{"./PointerDetectorWindowMediaParam":2,"./WindowParam":3}],5:[function(require,module,exports){
/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

/**
 * Media API for the Kurento Web SDK
 *
 * @module pointerdetector
 *
 * @copyright 2013-2014 Kurento (http://kurento.org/)
 * @license LGPL
 */

var PointerDetectorFilter = require('./PointerDetectorFilter');


exports.PointerDetectorFilter = PointerDetectorFilter;

exports.complexTypes = require('./complexTypes');

},{"./PointerDetectorFilter":1,"./complexTypes":4}],6:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}]},{},[5])(5)
});