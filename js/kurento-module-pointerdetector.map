{"version":3,"sources":["../node_modules/grunt-browserify/node_modules/browserify/node_modules/browser-pack/_prelude.js","../lib/browser.js","../lib/PointerDetectorFilter.js","../lib/complexTypes/index.js","../lib/complexTypes/PointerDetectorWindowMediaParam.js","../lib/complexTypes/WindowParam.js"],"names":["require","noop","error","result","console","trace","PointerDetectorFilter","super_","call","this","checkPointerDetectorFilter","key","value","ChecktypeError","inherits","kurentoClient","checkType","Transaction","TransactionsManager","Filter","register","abstracts","prototype","addWindow","window","callback","transaction","arguments","Array","shift","apply","undefined","required","params","bind","_invoke","clearWindows","length","removeWindow","windowId","trackColorFromCalibrationRegion","constructorParams","calibrationRegion","type","mediaPipeline","windows","isArray","events","concat","module","exports","check","PointerDetectorWindowMediaParam","WindowParam","pointerDetectorWindowMediaParamDict","id","height","width","upperRightX","upperRightY","activeImage","imageTransparency","image","Object","defineProperties","writable","enumerable","checkPointerDetectorWindowMediaParam","ComplexType","complexTypes","__module__","__type__","windowParamDict","topRightCornerX","topRightCornerY","checkWindowParam"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Loader for the kurento-module-pointerdetector package on the browser\n */\n\nrequire('.');\n","/* Autogenerated with Kurento Idl */\n\n/*\n * (C) Copyright 2013-2015 Kurento (http://kurento.org/)\n *\n * All rights reserved. This program and the accompanying materials are made\n * available under the terms of the GNU Lesser General Public License (LGPL)\n * version 2.1 which accompanies this distribution, and is available at\n * http://www.gnu.org/licenses/lgpl-2.1.html\n *\n * This library is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n */\n\nvar inherits = require('inherits');\n\nvar kurentoClient = require('kurento-client');\n\nvar checkType      = kurentoClient.checkType;\nvar ChecktypeError = checkType.ChecktypeError;\n\nvar Transaction = kurentoClient.TransactionsManager.Transaction;\n\nvar Filter = kurentoClient.register.abstracts.Filter;\n\n\nfunction noop(error, result) {\n  if (error) console.trace(error);\n\n  return result\n};\n\n\n/**\n * Builder for the :rom:cls:`PointerDetector`.\n *\n * @classdesc\n *  This type of {@link module:core/abstracts.Filter Filter} detects UI pointers\n *\n * @extends module:core/abstracts.Filter\n *\n * @constructor module:pointerdetector.PointerDetectorFilter\n *\n * @fires {@link module:pointerdetector#event:WindowIn WindowIn}\n * @fires {@link module:pointerdetector#event:WindowOut WindowOut}\n */\nfunction PointerDetectorFilter(){\n  PointerDetectorFilter.super_.call(this);\n};\ninherits(PointerDetectorFilter, Filter);\n\n\n//\n// Public methods\n//\n\n/**\n *  Adds a new detection window for the filter to detect pointers entering or \n *  exiting the window\n *\n * @alias module:pointerdetector.PointerDetectorFilter.addWindow\n *\n * @param {module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam} window\n *  The window to be added\n *\n * @param {module:pointerdetector.PointerDetectorFilter~addWindowCallback} [callback]\n *\n * @return {external:Promise}\n */\nPointerDetectorFilter.prototype.addWindow = function(window, callback){\n  var transaction = (arguments[0] instanceof Transaction)\n                  ? Array.prototype.shift.apply(arguments)\n                  : undefined;\n\n  checkType('PointerDetectorWindowMediaParam', 'window', window, {required: true});\n\n  var params = {\n    window: window\n  };\n\n  callback = (callback || noop).bind(this)\n\n  return this._invoke(transaction, 'addWindow', params, callback);\n};\n/**\n * @callback module:pointerdetector.PointerDetectorFilter~addWindowCallback\n * @param {external:Error} error\n */\n\n/**\n * Removes all pointer detector windows\n *\n * @alias module:pointerdetector.PointerDetectorFilter.clearWindows\n *\n * @param {module:pointerdetector.PointerDetectorFilter~clearWindowsCallback} [callback]\n *\n * @return {external:Promise}\n */\nPointerDetectorFilter.prototype.clearWindows = function(callback){\n  var transaction = (arguments[0] instanceof Transaction)\n                  ? Array.prototype.shift.apply(arguments)\n                  : undefined;\n\n  if(!arguments.length) callback = undefined;\n\n  callback = (callback || noop).bind(this)\n\n  return this._invoke(transaction, 'clearWindows', callback);\n};\n/**\n * @callback module:pointerdetector.PointerDetectorFilter~clearWindowsCallback\n * @param {external:Error} error\n */\n\n/**\n * Removes a window from the list to be monitored\n *\n * @alias module:pointerdetector.PointerDetectorFilter.removeWindow\n *\n * @param {external:String} windowId\n *  the id of the window to be removed\n *\n * @param {module:pointerdetector.PointerDetectorFilter~removeWindowCallback} [callback]\n *\n * @return {external:Promise}\n */\nPointerDetectorFilter.prototype.removeWindow = function(windowId, callback){\n  var transaction = (arguments[0] instanceof Transaction)\n                  ? Array.prototype.shift.apply(arguments)\n                  : undefined;\n\n  checkType('String', 'windowId', windowId, {required: true});\n\n  var params = {\n    windowId: windowId\n  };\n\n  callback = (callback || noop).bind(this)\n\n  return this._invoke(transaction, 'removeWindow', params, callback);\n};\n/**\n * @callback module:pointerdetector.PointerDetectorFilter~removeWindowCallback\n * @param {external:Error} error\n */\n\n/**\n * This method allows to calibrate the tracking color.\n * The new tracking color will be the color of the object in the \n * colorCalibrationRegion.\n *\n * @alias module:pointerdetector.PointerDetectorFilter.trackColorFromCalibrationRegion\n *\n * @param {module:pointerdetector.PointerDetectorFilter~trackColorFromCalibrationRegionCallback} [callback]\n *\n * @return {external:Promise}\n */\nPointerDetectorFilter.prototype.trackColorFromCalibrationRegion = function(callback){\n  var transaction = (arguments[0] instanceof Transaction)\n                  ? Array.prototype.shift.apply(arguments)\n                  : undefined;\n\n  if(!arguments.length) callback = undefined;\n\n  callback = (callback || noop).bind(this)\n\n  return this._invoke(transaction, 'trackColorFromCalibrationRegion', callback);\n};\n/**\n * @callback module:pointerdetector.PointerDetectorFilter~trackColorFromCalibrationRegionCallback\n * @param {external:Error} error\n */\n\n\n/**\n * @alias module:pointerdetector.PointerDetectorFilter.constructorParams\n *\n * @property {module:pointerdetector/complexTypes.WindowParam} calibrationRegion\n *  region to calibrate the filter\n *\n * @property {module:core.MediaPipeline} mediaPipeline\n *  the {@link module:core.MediaPipeline MediaPipeline} to which the filter \n *  belongs\n *\n * @property {module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam}[] [windows]\n *  list of detection windows for the filter.\n */\nPointerDetectorFilter.constructorParams = {\n  calibrationRegion: {\n    type: 'WindowParam',\n    required: true\n  },\n  mediaPipeline: {\n    type: 'MediaPipeline',\n    required: true\n  },\n  windows: {\n    type: 'PointerDetectorWindowMediaParam',\n    isArray: true\n  }\n};\n\n/**\n * @alias module:pointerdetector.PointerDetectorFilter.events\n *\n * @extends module:core/abstracts.Filter.events\n */\nPointerDetectorFilter.events = Filter.events.concat(['WindowIn', 'WindowOut']);\n\n\n/**\n * Checker for {@link pointerdetector.PointerDetectorFilter}\n *\n * @memberof module:pointerdetector\n *\n * @param {external:String} key\n * @param {module:pointerdetector.PointerDetectorFilter} value\n */\nfunction checkPointerDetectorFilter(key, value)\n{\n  if(!(value instanceof PointerDetectorFilter))\n    throw ChecktypeError(key, PointerDetectorFilter, value);\n};\n\n\nmodule.exports = PointerDetectorFilter;\n\nPointerDetectorFilter.check = checkPointerDetectorFilter;\n","/* Autogenerated with Kurento Idl */\n\n/*\n * (C) Copyright 2013-2015 Kurento (http://kurento.org/)\n *\n * All rights reserved. This program and the accompanying materials are made\n * available under the terms of the GNU Lesser General Public License (LGPL)\n * version 2.1 which accompanies this distribution, and is available at\n * http://www.gnu.org/licenses/lgpl-2.1.html\n *\n * This library is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n */\n\n/**\n * Media API for the Kurento Web SDK\n *\n * @module pointerdetector/complexTypes\n *\n * @copyright 2013-2015 Kurento (http://kurento.org/)\n * @license LGPL\n */\n\nvar PointerDetectorWindowMediaParam = require('./PointerDetectorWindowMediaParam');\nvar WindowParam = require('./WindowParam');\n\n\nexports.PointerDetectorWindowMediaParam = PointerDetectorWindowMediaParam;\nexports.WindowParam = WindowParam;\n","/* Autogenerated with Kurento Idl */\n\n/*\n * (C) Copyright 2013-2015 Kurento (http://kurento.org/)\n *\n * All rights reserved. This program and the accompanying materials are made\n * available under the terms of the GNU Lesser General Public License (LGPL)\n * version 2.1 which accompanies this distribution, and is available at\n * http://www.gnu.org/licenses/lgpl-2.1.html\n *\n * This library is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n */\n\nvar inherits = require('inherits');\n\nvar kurentoClient = require('kurento-client');\n\nvar checkType = kurentoClient.checkType;\nvar ChecktypeError = checkType.ChecktypeError;\n\nvar ComplexType = kurentoClient.register.complexTypes.ComplexType;\n\n\n/**\n * Data structure for UI Pointer detection in video streams.\n * All the coordinates are in pixels. X is horizontal, Y is vertical, running \n * from the top of the window. Thus, 0,0 corresponds to the topleft corner.\n *\n * @constructor module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam\n *\n * @property {external:String} id\n *  id of the window for pointer detection\n * @property {external:Integer} height\n *  height in pixels\n * @property {external:Integer} width\n *  width in pixels\n * @property {external:Integer} upperRightX\n *  X coordinate in pixels of the upper left corner\n * @property {external:Integer} upperRightY\n *  Y coordinate in pixels of the upper left corner\n * @property {external:String} activeImage\n *  uri of the image to be used when the pointer is inside the window\n * @property {external:Number} imageTransparency\n *  transparency ratio of the image\n * @property {external:String} image\n *  uri of the image to be used for the window.\n *  If {@link \n *  module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam#activeImage}\n */\nfunction PointerDetectorWindowMediaParam(pointerDetectorWindowMediaParamDict){\n  if(!(this instanceof PointerDetectorWindowMediaParam))\n    return new PointerDetectorWindowMediaParam(pointerDetectorWindowMediaParamDict)\n\n  pointerDetectorWindowMediaParamDict = pointerDetectorWindowMediaParamDict || {}\n\n  // Check pointerDetectorWindowMediaParamDict has the required fields\n  checkType('String', 'pointerDetectorWindowMediaParamDict.id', pointerDetectorWindowMediaParamDict.id, {required: true});\n  checkType('int', 'pointerDetectorWindowMediaParamDict.height', pointerDetectorWindowMediaParamDict.height, {required: true});\n  checkType('int', 'pointerDetectorWindowMediaParamDict.width', pointerDetectorWindowMediaParamDict.width, {required: true});\n  checkType('int', 'pointerDetectorWindowMediaParamDict.upperRightX', pointerDetectorWindowMediaParamDict.upperRightX, {required: true});\n  checkType('int', 'pointerDetectorWindowMediaParamDict.upperRightY', pointerDetectorWindowMediaParamDict.upperRightY, {required: true});\n  checkType('String', 'pointerDetectorWindowMediaParamDict.activeImage', pointerDetectorWindowMediaParamDict.activeImage);\n  checkType('float', 'pointerDetectorWindowMediaParamDict.imageTransparency', pointerDetectorWindowMediaParamDict.imageTransparency);\n  checkType('String', 'pointerDetectorWindowMediaParamDict.image', pointerDetectorWindowMediaParamDict.image);\n\n  // Init parent class\n  PointerDetectorWindowMediaParam.super_.call(this, pointerDetectorWindowMediaParamDict)\n\n  // Set object properties\n  Object.defineProperties(this, {\n    id: {\n      writable: true,\n      enumerable: true,\n      value: pointerDetectorWindowMediaParamDict.id\n    },\n    height: {\n      writable: true,\n      enumerable: true,\n      value: pointerDetectorWindowMediaParamDict.height\n    },\n    width: {\n      writable: true,\n      enumerable: true,\n      value: pointerDetectorWindowMediaParamDict.width\n    },\n    upperRightX: {\n      writable: true,\n      enumerable: true,\n      value: pointerDetectorWindowMediaParamDict.upperRightX\n    },\n    upperRightY: {\n      writable: true,\n      enumerable: true,\n      value: pointerDetectorWindowMediaParamDict.upperRightY\n    },\n    activeImage: {\n      writable: true,\n      enumerable: true,\n      value: pointerDetectorWindowMediaParamDict.activeImage\n    },\n    imageTransparency: {\n      writable: true,\n      enumerable: true,\n      value: pointerDetectorWindowMediaParamDict.imageTransparency\n    },\n    image: {\n      writable: true,\n      enumerable: true,\n      value: pointerDetectorWindowMediaParamDict.image\n    }\n  })\n}\ninherits(PointerDetectorWindowMediaParam, ComplexType)\n\n// Private identifiers to allow re-construction of the complexType on the server\n// They need to be enumerable so JSON.stringify() can access to them\nObject.defineProperties(PointerDetectorWindowMediaParam.prototype, {\n  __module__: {\n    enumerable: true,\n    value: \"pointerdetector\"\n  },\n  __type__: {\n    enumerable: true,\n    value: \"PointerDetectorWindowMediaParam\"\n  }\n})\n\n/**\n * Checker for {@link pointerdetector/complexTypes.PointerDetectorWindowMediaParam}\n *\n * @memberof module:pointerdetector/complexTypes\n *\n * @param {external:String} key\n * @param {module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam} value\n */\nfunction checkPointerDetectorWindowMediaParam(key, value)\n{\n  if(!(value instanceof PointerDetectorWindowMediaParam))\n    throw ChecktypeError(key, PointerDetectorWindowMediaParam, value);\n};\n\n\nmodule.exports = PointerDetectorWindowMediaParam;\n\nPointerDetectorWindowMediaParam.check = checkPointerDetectorWindowMediaParam;\n","/* Autogenerated with Kurento Idl */\n\n/*\n * (C) Copyright 2013-2015 Kurento (http://kurento.org/)\n *\n * All rights reserved. This program and the accompanying materials are made\n * available under the terms of the GNU Lesser General Public License (LGPL)\n * version 2.1 which accompanies this distribution, and is available at\n * http://www.gnu.org/licenses/lgpl-2.1.html\n *\n * This library is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n */\n\nvar inherits = require('inherits');\n\nvar kurentoClient = require('kurento-client');\n\nvar checkType = kurentoClient.checkType;\nvar ChecktypeError = checkType.ChecktypeError;\n\nvar ComplexType = kurentoClient.register.complexTypes.ComplexType;\n\n\n/**\n * Parameter representing a window in a video stream.\n * It is used in command and constructor for media elements.\n * All units are in pixels, X runs from left to right, Y from top to bottom.\n *\n * @constructor module:pointerdetector/complexTypes.WindowParam\n *\n * @property {external:Integer} topRightCornerX\n *  X coordinate of the left upper point of the window\n * @property {external:Integer} topRightCornerY\n *  Y coordinate of the left upper point of the window\n * @property {external:Integer} width\n *  width in pixels of the window\n * @property {external:Integer} height\n *  height in pixels of the window\n */\nfunction WindowParam(windowParamDict){\n  if(!(this instanceof WindowParam))\n    return new WindowParam(windowParamDict)\n\n  windowParamDict = windowParamDict || {}\n\n  // Check windowParamDict has the required fields\n  checkType('int', 'windowParamDict.topRightCornerX', windowParamDict.topRightCornerX, {required: true});\n  checkType('int', 'windowParamDict.topRightCornerY', windowParamDict.topRightCornerY, {required: true});\n  checkType('int', 'windowParamDict.width', windowParamDict.width, {required: true});\n  checkType('int', 'windowParamDict.height', windowParamDict.height, {required: true});\n\n  // Init parent class\n  WindowParam.super_.call(this, windowParamDict)\n\n  // Set object properties\n  Object.defineProperties(this, {\n    topRightCornerX: {\n      writable: true,\n      enumerable: true,\n      value: windowParamDict.topRightCornerX\n    },\n    topRightCornerY: {\n      writable: true,\n      enumerable: true,\n      value: windowParamDict.topRightCornerY\n    },\n    width: {\n      writable: true,\n      enumerable: true,\n      value: windowParamDict.width\n    },\n    height: {\n      writable: true,\n      enumerable: true,\n      value: windowParamDict.height\n    }\n  })\n}\ninherits(WindowParam, ComplexType)\n\n// Private identifiers to allow re-construction of the complexType on the server\n// They need to be enumerable so JSON.stringify() can access to them\nObject.defineProperties(WindowParam.prototype, {\n  __module__: {\n    enumerable: true,\n    value: \"pointerdetector\"\n  },\n  __type__: {\n    enumerable: true,\n    value: \"WindowParam\"\n  }\n})\n\n/**\n * Checker for {@link pointerdetector/complexTypes.WindowParam}\n *\n * @memberof module:pointerdetector/complexTypes\n *\n * @param {external:String} key\n * @param {module:pointerdetector/complexTypes.WindowParam} value\n */\nfunction checkWindowParam(key, value)\n{\n  if(!(value instanceof WindowParam))\n    throw ChecktypeError(key, WindowParam, value);\n};\n\n\nmodule.exports = WindowParam;\n\nWindowParam.check = checkWindowParam;\n"]}