{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","../lib/PointerDetectorFilter.js","../lib/browser.js","../lib/complexTypes/PointerDetectorWindowMediaParam.js","../lib/complexTypes/WindowParam.js","../lib/complexTypes/index.js"],"names":["noop","error","result","console","trace","PointerDetectorFilter","super_","call","this","checkPointerDetectorFilter","key","value","ChecktypeError","inherits","require","kurentoClient","disguise","checkType","Transaction","TransactionsManager","Filter","register","abstracts","prototype","addWindow","window","callback","transaction","arguments","Array","shift","apply","undefined","params","bind","_invoke","clearWindows","length","removeWindow","windowId","trackColorFromCalibrationRegion","constructorParams","calibrationRegion","type","required","mediaPipeline","windows","isArray","events","concat","module","exports","check","PointerDetectorWindowMediaParam","pointerDetectorWindowMediaParamDict","Object","defineProperties","id","writable","enumerable","height","width","upperRightX","upperRightY","activeImage","imageTransparency","image","checkPointerDetectorWindowMediaParam","ComplexType","complexTypes","__module__","__type__","WindowParam","windowParamDict","topRightCornerX","topRightCornerY","checkWindowParam"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/* Autogenerated with Kurento Idl */\n\n/*\n * (C) Copyright 2013-2015 Kurento (http://kurento.org/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar inherits = require('inherits');\n\nvar kurentoClient = require('kurento-client');\n\nvar disguise = kurentoClient.disguise;\n\nvar checkType      = kurentoClient.checkType;\nvar ChecktypeError = checkType.ChecktypeError;\n\n\nvar Transaction = kurentoClient.TransactionsManager.Transaction;\n\nvar Filter = kurentoClient.register.abstracts.Filter;\n\n\nfunction noop(error, result) {\n  if (error) console.trace(error);\n\n  return result\n};\n\n\n/**\n * Builder for the :rom:cls:`PointerDetector`.\n *\n * @classdesc\n *  This type of {@link Filter} detects UI pointers in a video feed.\n *\n * @extends module:core/abstracts.Filter\n *\n * @constructor module:pointerdetector.PointerDetectorFilter\n *\n * @fires {@link module:pointerdetector#event:WindowIn WindowIn}\n * @fires {@link module:pointerdetector#event:WindowOut WindowOut}\n */\nfunction PointerDetectorFilter(){\n  PointerDetectorFilter.super_.call(this);\n};\ninherits(PointerDetectorFilter, Filter);\n\n\n//\n// Public methods\n//\n\n/**\n *  Adds a new detection window for the filter to detect pointers entering or \n *  exiting the window\n *\n * @alias module:pointerdetector.PointerDetectorFilter.addWindow\n *\n * @param {module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam} window\n *  The window to be added\n *\n * @param {module:pointerdetector.PointerDetectorFilter~addWindowCallback} [callback]\n *\n * @return {external:Promise}\n */\nPointerDetectorFilter.prototype.addWindow = function(window, callback){\n  var transaction = (arguments[0] instanceof Transaction)\n                  ? Array.prototype.shift.apply(arguments)\n                  : undefined;\n\n  //  \n  // checkType('PointerDetectorWindowMediaParam', 'window', window, {required: true});\n  //  \n\n  var params = {\n    window: window\n  };\n\n  callback = (callback || noop).bind(this)\n\n  return disguise(this._invoke(transaction, 'addWindow', params, callback), this)\n};\n/**\n * @callback module:pointerdetector.PointerDetectorFilter~addWindowCallback\n * @param {external:Error} error\n */\n\n/**\n * Removes all pointer detector windows\n *\n * @alias module:pointerdetector.PointerDetectorFilter.clearWindows\n *\n * @param {module:pointerdetector.PointerDetectorFilter~clearWindowsCallback} [callback]\n *\n * @return {external:Promise}\n */\nPointerDetectorFilter.prototype.clearWindows = function(callback){\n  var transaction = (arguments[0] instanceof Transaction)\n                  ? Array.prototype.shift.apply(arguments)\n                  : undefined;\n\n  var usePromise = false;\n  \n  if (callback == undefined) {\n    usePromise = true;\n  }\n  \n  if(!arguments.length) callback = undefined;\n\n  callback = (callback || noop).bind(this)\n\n  return disguise(this._invoke(transaction, 'clearWindows', callback), this)\n};\n/**\n * @callback module:pointerdetector.PointerDetectorFilter~clearWindowsCallback\n * @param {external:Error} error\n */\n\n/**\n * Removes a window from the list to be monitored\n *\n * @alias module:pointerdetector.PointerDetectorFilter.removeWindow\n *\n * @param {external:String} windowId\n *  the id of the window to be removed\n *\n * @param {module:pointerdetector.PointerDetectorFilter~removeWindowCallback} [callback]\n *\n * @return {external:Promise}\n */\nPointerDetectorFilter.prototype.removeWindow = function(windowId, callback){\n  var transaction = (arguments[0] instanceof Transaction)\n                  ? Array.prototype.shift.apply(arguments)\n                  : undefined;\n\n  //  \n  // checkType('String', 'windowId', windowId, {required: true});\n  //  \n\n  var params = {\n    windowId: windowId\n  };\n\n  callback = (callback || noop).bind(this)\n\n  return disguise(this._invoke(transaction, 'removeWindow', params, callback), this)\n};\n/**\n * @callback module:pointerdetector.PointerDetectorFilter~removeWindowCallback\n * @param {external:Error} error\n */\n\n/**\n * This method allows to calibrate the tracking color.\n * The new tracking color will be the color of the object in the \n * colorCalibrationRegion.\n *\n * @alias module:pointerdetector.PointerDetectorFilter.trackColorFromCalibrationRegion\n *\n * @param {module:pointerdetector.PointerDetectorFilter~trackColorFromCalibrationRegionCallback} [callback]\n *\n * @return {external:Promise}\n */\nPointerDetectorFilter.prototype.trackColorFromCalibrationRegion = function(callback){\n  var transaction = (arguments[0] instanceof Transaction)\n                  ? Array.prototype.shift.apply(arguments)\n                  : undefined;\n\n  var usePromise = false;\n  \n  if (callback == undefined) {\n    usePromise = true;\n  }\n  \n  if(!arguments.length) callback = undefined;\n\n  callback = (callback || noop).bind(this)\n\n  return disguise(this._invoke(transaction, 'trackColorFromCalibrationRegion', callback), this)\n};\n/**\n * @callback module:pointerdetector.PointerDetectorFilter~trackColorFromCalibrationRegionCallback\n * @param {external:Error} error\n */\n\n\n/**\n * @alias module:pointerdetector.PointerDetectorFilter.constructorParams\n *\n * @property {module:pointerdetector/complexTypes.WindowParam} calibrationRegion\n *  region to calibrate the filter\n *\n * @property {module:core.MediaPipeline} mediaPipeline\n *  the {@link MediaPipeline} to which the filter belongs\n *\n * @property {module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam}[] [windows]\n *  list of detection windows for the filter.\n */\nPointerDetectorFilter.constructorParams = {\n  calibrationRegion: {\n    type: 'pointerdetector.WindowParam',\n    required: true\n  },\n  mediaPipeline: {\n    type: 'kurento.MediaPipeline',\n    required: true\n  },\n  windows: {\n    type: 'pointerdetector.PointerDetectorWindowMediaParam',\n    isArray: true\n  }\n};\n\n/**\n * @alias module:pointerdetector.PointerDetectorFilter.events\n *\n * @extends module:core/abstracts.Filter.events\n */\nPointerDetectorFilter.events = Filter.events.concat(['WindowIn', 'WindowOut']);\n\n\n/**\n * Checker for {@link module:pointerdetector.PointerDetectorFilter}\n *\n * @memberof module:pointerdetector\n *\n * @param {external:String} key\n * @param {module:pointerdetector.PointerDetectorFilter} value\n */\nfunction checkPointerDetectorFilter(key, value)\n{\n  if(!(value instanceof PointerDetectorFilter))\n    throw ChecktypeError(key, PointerDetectorFilter, value);\n};\n\n\nmodule.exports = PointerDetectorFilter;\n\nPointerDetectorFilter.check = checkPointerDetectorFilter;\n","/**\n * Loader for the kurento-module-pointerdetector package on the browser\n */\n\nrequire('.');\n","/* Autogenerated with Kurento Idl */\n\n/*\n * (C) Copyright 2013-2015 Kurento (http://kurento.org/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar inherits = require('inherits');\n\nvar kurentoClient = require('kurento-client');\n\nvar checkType = kurentoClient.checkType;\nvar ChecktypeError = checkType.ChecktypeError;\n\nvar ComplexType = kurentoClient.register.complexTypes.ComplexType;\n\n\n/**\n * Data structure for UI Pointer detection in video streams.\n * All the coordinates are in pixels. X is horizontal, Y is vertical, running \n * from the top of the window. Thus, 0,0 corresponds to the topleft corner.\n *\n * @constructor module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam\n *\n * @property {external:String} id\n *  id of the window for pointer detection\n * @property {external:Integer} height\n *  height in pixels\n * @property {external:Integer} width\n *  width in pixels\n * @property {external:Integer} upperRightX\n *  X coordinate in pixels of the upper left corner\n * @property {external:Integer} upperRightY\n *  Y coordinate in pixels of the upper left corner\n * @property {external:String} activeImage\n *  uri of the image to be used when the pointer is inside the window\n * @property {external:Number} imageTransparency\n *  transparency ratio of the image\n * @property {external:String} image\n *  uri of the image to be used for the window.\n *  If {@link \n *  pointerdetector/complexTypes.PointerDetectorWindowMediaParam#activeImage} \n *  has been set, it will only be shown when the pointer is outside of the \n *  window.\n */\nfunction PointerDetectorWindowMediaParam(pointerDetectorWindowMediaParamDict){\n  if(!(this instanceof PointerDetectorWindowMediaParam))\n    return new PointerDetectorWindowMediaParam(pointerDetectorWindowMediaParamDict)\n\n  pointerDetectorWindowMediaParamDict = pointerDetectorWindowMediaParamDict || {}\n\n  // Check pointerDetectorWindowMediaParamDict has the required fields\n  // \n  // checkType('String', 'pointerDetectorWindowMediaParamDict.id', pointerDetectorWindowMediaParamDict.id, {required: true});\n  //  \n  // checkType('int', 'pointerDetectorWindowMediaParamDict.height', pointerDetectorWindowMediaParamDict.height, {required: true});\n  //  \n  // checkType('int', 'pointerDetectorWindowMediaParamDict.width', pointerDetectorWindowMediaParamDict.width, {required: true});\n  //  \n  // checkType('int', 'pointerDetectorWindowMediaParamDict.upperRightX', pointerDetectorWindowMediaParamDict.upperRightX, {required: true});\n  //  \n  // checkType('int', 'pointerDetectorWindowMediaParamDict.upperRightY', pointerDetectorWindowMediaParamDict.upperRightY, {required: true});\n  //  \n  // checkType('String', 'pointerDetectorWindowMediaParamDict.activeImage', pointerDetectorWindowMediaParamDict.activeImage);\n  //  \n  // checkType('float', 'pointerDetectorWindowMediaParamDict.imageTransparency', pointerDetectorWindowMediaParamDict.imageTransparency);\n  //  \n  // checkType('String', 'pointerDetectorWindowMediaParamDict.image', pointerDetectorWindowMediaParamDict.image);\n  //  \n\n  // Init parent class\n  PointerDetectorWindowMediaParam.super_.call(this, pointerDetectorWindowMediaParamDict)\n\n  // Set object properties\n  Object.defineProperties(this, {\n    id: {\n      writable: true,\n      enumerable: true,\n      value: pointerDetectorWindowMediaParamDict.id\n    },\n    height: {\n      writable: true,\n      enumerable: true,\n      value: pointerDetectorWindowMediaParamDict.height\n    },\n    width: {\n      writable: true,\n      enumerable: true,\n      value: pointerDetectorWindowMediaParamDict.width\n    },\n    upperRightX: {\n      writable: true,\n      enumerable: true,\n      value: pointerDetectorWindowMediaParamDict.upperRightX\n    },\n    upperRightY: {\n      writable: true,\n      enumerable: true,\n      value: pointerDetectorWindowMediaParamDict.upperRightY\n    },\n    activeImage: {\n      writable: true,\n      enumerable: true,\n      value: pointerDetectorWindowMediaParamDict.activeImage\n    },\n    imageTransparency: {\n      writable: true,\n      enumerable: true,\n      value: pointerDetectorWindowMediaParamDict.imageTransparency\n    },\n    image: {\n      writable: true,\n      enumerable: true,\n      value: pointerDetectorWindowMediaParamDict.image\n    }\n  })\n}\ninherits(PointerDetectorWindowMediaParam, ComplexType)\n\n// Private identifiers to allow re-construction of the complexType on the server\n// They need to be enumerable so JSON.stringify() can access to them\nObject.defineProperties(PointerDetectorWindowMediaParam.prototype, {\n  __module__: {\n    enumerable: true,\n    value: \"pointerdetector\"\n  },\n  __type__: {\n    enumerable: true,\n    value: \"PointerDetectorWindowMediaParam\"\n  }\n})\n\n/**\n * Checker for {@link module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam}\n *\n * @memberof module:pointerdetector/complexTypes\n *\n * @param {external:String} key\n * @param {module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam} value\n */\nfunction checkPointerDetectorWindowMediaParam(key, value)\n{\n  if(!(value instanceof PointerDetectorWindowMediaParam))\n    throw ChecktypeError(key, PointerDetectorWindowMediaParam, value);\n};\n\n\nmodule.exports = PointerDetectorWindowMediaParam;\n\nPointerDetectorWindowMediaParam.check = checkPointerDetectorWindowMediaParam;\n","/* Autogenerated with Kurento Idl */\n\n/*\n * (C) Copyright 2013-2015 Kurento (http://kurento.org/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar inherits = require('inherits');\n\nvar kurentoClient = require('kurento-client');\n\nvar checkType = kurentoClient.checkType;\nvar ChecktypeError = checkType.ChecktypeError;\n\nvar ComplexType = kurentoClient.register.complexTypes.ComplexType;\n\n\n/**\n * Parameter representing a window in a video stream.\n * It is used in command and constructor for media elements.\n * All units are in pixels, X runs from left to right, Y from top to bottom.\n *\n * @constructor module:pointerdetector/complexTypes.WindowParam\n *\n * @property {external:Integer} topRightCornerX\n *  X coordinate of the left upper point of the window\n * @property {external:Integer} topRightCornerY\n *  Y coordinate of the left upper point of the window\n * @property {external:Integer} width\n *  width in pixels of the window\n * @property {external:Integer} height\n *  height in pixels of the window\n */\nfunction WindowParam(windowParamDict){\n  if(!(this instanceof WindowParam))\n    return new WindowParam(windowParamDict)\n\n  windowParamDict = windowParamDict || {}\n\n  // Check windowParamDict has the required fields\n  // \n  // checkType('int', 'windowParamDict.topRightCornerX', windowParamDict.topRightCornerX, {required: true});\n  //  \n  // checkType('int', 'windowParamDict.topRightCornerY', windowParamDict.topRightCornerY, {required: true});\n  //  \n  // checkType('int', 'windowParamDict.width', windowParamDict.width, {required: true});\n  //  \n  // checkType('int', 'windowParamDict.height', windowParamDict.height, {required: true});\n  //  \n\n  // Init parent class\n  WindowParam.super_.call(this, windowParamDict)\n\n  // Set object properties\n  Object.defineProperties(this, {\n    topRightCornerX: {\n      writable: true,\n      enumerable: true,\n      value: windowParamDict.topRightCornerX\n    },\n    topRightCornerY: {\n      writable: true,\n      enumerable: true,\n      value: windowParamDict.topRightCornerY\n    },\n    width: {\n      writable: true,\n      enumerable: true,\n      value: windowParamDict.width\n    },\n    height: {\n      writable: true,\n      enumerable: true,\n      value: windowParamDict.height\n    }\n  })\n}\ninherits(WindowParam, ComplexType)\n\n// Private identifiers to allow re-construction of the complexType on the server\n// They need to be enumerable so JSON.stringify() can access to them\nObject.defineProperties(WindowParam.prototype, {\n  __module__: {\n    enumerable: true,\n    value: \"pointerdetector\"\n  },\n  __type__: {\n    enumerable: true,\n    value: \"WindowParam\"\n  }\n})\n\n/**\n * Checker for {@link module:pointerdetector/complexTypes.WindowParam}\n *\n * @memberof module:pointerdetector/complexTypes\n *\n * @param {external:String} key\n * @param {module:pointerdetector/complexTypes.WindowParam} value\n */\nfunction checkWindowParam(key, value)\n{\n  if(!(value instanceof WindowParam))\n    throw ChecktypeError(key, WindowParam, value);\n};\n\n\nmodule.exports = WindowParam;\n\nWindowParam.check = checkWindowParam;\n","/* Autogenerated with Kurento Idl */\n\n/*\n * (C) Copyright 2013-2015 Kurento (http://kurento.org/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Media API for the Kurento Web SDK\n *\n * @module pointerdetector/complexTypes\n *\n * @copyright 2013-2015 Kurento (http://kurento.org/)\n * @license ALv2\n */\n\nvar PointerDetectorWindowMediaParam = require('./PointerDetectorWindowMediaParam');\nvar WindowParam = require('./WindowParam');\n\n\nexports.PointerDetectorWindowMediaParam = PointerDetectorWindowMediaParam;\nexports.WindowParam = WindowParam;\n"]}